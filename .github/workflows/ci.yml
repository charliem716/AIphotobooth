name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC

env:
  SWIFT_VERSION: '5.10'
  XCODE_VERSION: '15.4'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        swiftlint --version
    
    - name: SwiftLint Analysis
      run: |
        swiftlint lint --reporter github-actions-logging 2>&1 | tee swiftlint-results.log || true
        swiftlint analyze --reporter github-actions-logging 2>&1 | tee -a swiftlint-results.log || true
    
    - name: Upload SwiftLint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: swiftlint-results
        path: |
          swiftlint-results.log
        retention-days: 30

  # Job 2: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: macos-14
    strategy:
      matrix:
        destination: ['macOS']
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Resolve Swift Package Dependencies
      run: swift package resolve
    
    - name: Build Project
      run: |
        swift build -c release
    
    - name: Run Unit Tests with Coverage
      run: |
        swift test --enable-code-coverage --parallel 2>&1 | tee test-results.log
    
    - name: Generate Code Coverage Report
      run: |
        # Find the correct architecture directory
        ARCH_DIR=$(find .build -name "*.xctest" -type d | head -1 | xargs dirname)
        if [ -n "$ARCH_DIR" ]; then
          # Find the test binary
          TEST_BINARY=$(find "$ARCH_DIR" -name "PhotoBoothPackageTests" -type f | head -1)
          # Find the coverage profile
          COVERAGE_PROFILE=$(find .build -name "*.profdata" | head -1)
          
          if [ -n "$TEST_BINARY" ] && [ -n "$COVERAGE_PROFILE" ]; then
            echo "Generating coverage report..."
            xcrun llvm-cov show \
              "$TEST_BINARY" \
              -instr-profile "$COVERAGE_PROFILE" \
              -format html \
              -output-dir .build/coverage-html
            
            # Generate coverage summary
            xcrun llvm-cov report \
              "$TEST_BINARY" \
              -instr-profile "$COVERAGE_PROFILE" \
              > .build/coverage-summary.txt
          else
            echo "Warning: Could not find test binary or coverage profile"
            echo "TEST_BINARY: $TEST_BINARY"
            echo "COVERAGE_PROFILE: $COVERAGE_PROFILE"
          fi
        else
          echo "Warning: Could not find architecture directory"
        fi
    
    - name: Build with Xcode (for UI tests)
      run: |
        # Create a basic scheme for testing
        xcodebuild -list -project . 2>/dev/null || echo "No Xcode project found, using SPM"
        
        # Build the package for testing
        xcodebuild build-for-testing \
          -scheme PhotoBooth \
          -destination 'platform=macOS' \
          -derivedDataPath .build/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO || echo "Xcode build failed, continuing with SPM tests"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.destination }}
        path: |
          test-results.log
          .build/coverage-html
          .build/coverage-summary.txt
        retention-days: 30
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: .build/coverage-html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 3: Security and Dependency Scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: macos-14
    permissions:
      security-events: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Swift Package Audit
      run: |
        echo "=== Swift Package Dependencies ===" | tee security-scan.log
        swift package show-dependencies --format json > dependencies.json
        swift package show-dependencies | tee -a security-scan.log
        
        # Check for known vulnerabilities in dependencies
        echo "=== Security Scan Results ===" | tee -a security-scan.log
        if command -v audit-swift &> /dev/null; then
          audit-swift dependencies.json | tee -a security-scan.log
        else
          echo "audit-swift not available, skipping automated vulnerability check" | tee -a security-scan.log
        fi
    
    - name: Check for Hardcoded Secrets
      run: |
        # Basic secret scanning patterns
        echo "=== Secret Scanning ===" | tee -a security-scan.log
        echo "Scanning for potential hardcoded secrets..." | tee -a security-scan.log
        
        # Check git history for sensitive patterns
        git log --all --full-history --grep="password\|secret\|key\|token" --oneline | tee -a security-scan.log || true
        
        # Check for common secret patterns in source code
        echo "Scanning source code for hardcoded secrets..." | tee -a security-scan.log
        grep -r -n -i -E "(password|secret|key|token|api_key|apikey)\s*[=:]\s*[\"'][^\"']{8,}" . \
          --include="*.swift" --include="*.plist" --include="*.json" \
          --exclude-dir=.git --exclude-dir=.build | tee -a security-scan.log || true
    
    - name: License Check
      run: |
        # Check for license compatibility
        echo "=== License Check ===" | tee -a security-scan.log
        swift package show-dependencies --format json | jq -r '.dependencies[].name' 2>/dev/null | tee -a security-scan.log || echo "jq not available, skipping JSON parsing" | tee -a security-scan.log
    
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          dependencies.json
          security-scan.log
        retention-days: 90

  # Job 4: Build Performance Analysis
  performance-analysis:
    name: Build Performance Analysis
    runs-on: macos-14
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Build Time Analysis
      run: |
        # Build with timing information
        echo "=== Build Performance Analysis ===" | tee build-timing.log
        time swift build -c release -v 2>&1 | tee -a build-timing.log
    
    - name: Bundle Size Analysis
      run: |
        # Analyze built product size
        echo "=== Bundle Size Analysis ===" | tee bundle-sizes.txt
        swift build -c release
        find .build -name "*.app" -o -name "*.framework" -o -name "*.dylib" -o -name "PhotoBooth" | \
          xargs -I {} sh -c 'if [ -e "{}" ]; then du -sh "{}"; fi' | tee -a bundle-sizes.txt
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-analysis
        path: |
          build-timing.log
          bundle-sizes.txt
        retention-days: 30

  # Job 5: Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Generate Swift Documentation
      run: |
        # Create documentation directory
        mkdir -p .build/documentation
        
        # Generate documentation using swift-docc if available
        if swift package plugin --list | grep -q docc; then
          swift package generate-documentation \
            --target PhotoBooth \
            --output-path .build/documentation
        else
          echo "swift-docc plugin not available, generating basic documentation" | tee .build/documentation/README.md
          echo "# PhotoBooth Documentation" >> .build/documentation/README.md
          echo "Documentation generated on $(date)" >> .build/documentation/README.md
        fi
    
    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation
        path: .build/documentation
        retention-days: 30

  # Job 6: Deployment Preparation
  deployment-prep:
    name: Deployment Preparation
    runs-on: macos-14
    needs: [code-quality, build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
    
    - name: Create Export Options
      run: |
        # Create basic export options plist
        mkdir -p .build
        cat > .build/ExportOptions.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>teamID</key>
            <string></string>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
    
    - name: Build Release Archive
      run: |
        # Build release version
        swift build -c release
        
        # Create archive structure
        mkdir -p .build/PhotoBooth.xcarchive/Products/Applications
        mkdir -p .build/export
        
        # Copy built products
        if [ -f .build/release/PhotoBooth ]; then
          cp .build/release/PhotoBooth .build/PhotoBooth.xcarchive/Products/Applications/
        fi
        
        echo "Archive created successfully" | tee .build/export/export.log
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .build/PhotoBooth.xcarchive
          .build/export
          .build/ExportOptions.plist
        retention-days: 90

  # Job 7: Notification and Reporting
  notification:
    name: Notification & Reporting
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Generate CI Report
      run: |
        echo "# CI/CD Pipeline Report" > ci-report.md
        echo "## Build Status" >> ci-report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> ci-report.md
        echo "- Build & Test: ${{ needs.build-and-test.result }}" >> ci-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> ci-report.md
        echo "## Commit Information" >> ci-report.md
        echo "- Commit: ${{ github.sha }}" >> ci-report.md
        echo "- Author: ${{ github.actor }}" >> ci-report.md
        echo "- Branch: ${{ github.ref_name }}" >> ci-report.md
        echo "- Event: ${{ github.event_name }}" >> ci-report.md
        echo "## Timestamp" >> ci-report.md
        echo "- Generated: $(date -u)" >> ci-report.md
    
    - name: Upload CI Report
      uses: actions/upload-artifact@v4
      with:
        name: ci-report
        path: ci-report.md
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('ci-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          }); 