name: Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive credentials
      run: |
        # Check for OpenAI API keys
        if grep -r "sk-[a-zA-Z0-9]\{48\}" . --exclude-dir=.git; then
          echo "❌ ERROR: OpenAI API key found in repository!"
          echo "Please remove the API key and use environment variables or Keychain storage instead."
          exit 1
        fi
        
        # Check for Twilio credentials
        if grep -r "AC[a-zA-Z0-9]\{32\}" . --exclude-dir=.git; then
          echo "❌ ERROR: Twilio Account SID found in repository!"
          echo "Please remove the credential and use environment variables or Keychain storage instead."
          exit 1
        fi
        
        # Check for potential secrets in common formats
        if grep -r "api_key\s*=\s*[\"'][a-zA-Z0-9_-]\{20,\}[\"']" . --exclude-dir=.git; then
          echo "❌ ERROR: Potential API key found in repository!"
          echo "Please remove the API key and use secure storage instead."
          exit 1
        fi
        
        if grep -r "token\s*=\s*[\"'][a-zA-Z0-9_-]\{20,\}[\"']" . --exclude-dir=.git; then
          echo "❌ ERROR: Potential token found in repository!"
          echo "Please remove the token and use secure storage instead."
          exit 1
        fi
        
        # Check for .env files with actual values (not just examples)
        if [ -f .env ]; then
          if grep -E "^[A-Z_]+=[a-zA-Z0-9_-]{20,}" .env; then
            echo "❌ ERROR: .env file contains actual credentials!"
            echo "Please remove actual credentials and use .env.example template instead."
            exit 1
          fi
        fi
        
        # Check for hardcoded credentials in Swift files
        if grep -r "let.*key.*=.*\"[a-zA-Z0-9_-]\{20,\}\"" Sources/ --include="*.swift" 2>/dev/null; then
          echo "❌ ERROR: Hardcoded credentials found in Swift files!"
          echo "Please use ConfigurationService or environment variables instead."
          exit 1
        fi
        
        echo "✅ Security check passed - no sensitive credentials found in repository"
        
    - name: Check for TODO security items
      run: |
        # Check for security-related TODOs that should be addressed
        if grep -r "TODO.*security\|TODO.*credential\|TODO.*key\|TODO.*token" . --exclude-dir=.git --exclude-dir=.github; then
          echo "⚠️  WARNING: Security-related TODOs found. Please address these before production:"
          grep -r "TODO.*security\|TODO.*credential\|TODO.*key\|TODO.*token" . --exclude-dir=.git --exclude-dir=.github || true
        fi
        
    - name: Verify secure credential patterns
      run: |
        echo "🔍 Checking for secure credential handling patterns..."
        
        # Verify ConfigurationService uses secure methods
        if ! grep -q "KeychainCredentialStore" Sources/PhotoBooth/Services/ConfigurationService.swift; then
          echo "❌ ERROR: ConfigurationService should use KeychainCredentialStore"
          exit 1
        fi
        
        # Verify no hardcoded credentials in OpenAI service
        if grep -q "sk-[a-zA-Z0-9]" Sources/PhotoBooth/Services/OpenAIService.swift; then
          echo "❌ ERROR: OpenAI service contains hardcoded credentials"
          exit 1
        fi
        
        echo "✅ Secure credential patterns verified"
        
    - name: Check .env.example template
      run: |
        if [ ! -f env.example ]; then
          echo "❌ ERROR: env.example template file is missing"
          exit 1
        fi
        
        # Verify env.example contains template values, not real credentials
        if grep -E "^[A-Z_]+=[a-zA-Z0-9_-]{20,}" env.example; then
          echo "❌ ERROR: env.example contains actual credentials instead of template values"
          exit 1
        fi
        
        echo "✅ env.example template verified"
        
    - name: Generate security report
      run: |
        echo "## 🔐 Security Report" >> $GITHUB_STEP_SUMMARY
        echo "### Credentials Storage" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Keychain integration implemented" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Environment variable fallback available" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Automatic migration from .env to Keychain" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No hardcoded credentials found" >> $GITHUB_STEP_SUMMARY
        echo "### Security Features" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 macOS Keychain encryption" >> $GITHUB_STEP_SUMMARY
        echo "- 🔐 Access control per application" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Comprehensive logging without exposing secrets" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ CI/CD security checks" >> $GITHUB_STEP_SUMMARY 